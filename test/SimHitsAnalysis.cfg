process SimHitsAnalysis  = 
	{
      source = PoolSource { 
      untracked vstring fileNames = {'file:simevent.root'}
      untracked int32 maxEvents = 10
      untracked uint32 debugVebosity = 10
      untracked bool   debugFlag     = true
	}

   #Geometry
   #
   es_source = XMLIdealGeometryESSource 
   { 
      # FileInPath GeometryConfiguration = "SimG4Core/Application/test/SimConfiguration.xml"
      FileInPath GeometryConfiguration = "Geometry/CMSCommonData/data/SimConfiguration.xml"
      #the proper root node is set in the xml file
      string rootNodeName = ""
   }
   es_module = TrackerGeometricDetESModule {}
		
   #Magnetic Field
   #
   es_source magfield = XMLIdealGeometryESSource 
   {
      # FileInPath GeometryConfiguration ="SimG4Core/Application/test/FieldConfiguration.xml"
      FileInPath GeometryConfiguration ="Geometry/CMSCommonData/data/FieldConfiguration.xml"
      #the proper root node is set in the xml file
      string rootNodeName=""
   }
   es_module = VolumeBasedMagneticFieldESProducer 
   {
      double findVolumeTolerance = 0.0
      untracked bool cacheLastVolume = true
      untracked bool timerOn = false
   }
	
      es_module = EcalBarrelGeometryEP {}        
      es_module = EcalEndcapGeometryEP {}        
      es_module = EcalPreshowerGeometryEP {}        
      es_module = HcalHardcodeGeometryEP {}      
      es_module = CaloTowerHardcodeGeometryEP {} 
      es_module = CaloGeometryBuilder {}         
 
      module print = AsciiOutputModule {}
      module prod =  EcalSimHitsTask {
      untracked string moduleLabelMC = 'FlatRandomEGunSource' 
#   	  untracked string moduleLabelMC = 'MCFileSource' 
#      untracked string moduleLabelMC = 'H2RootNtplSource'
 	  untracked string moduleLabelTk = 'SimG4Object' 
	  untracked string moduleLabelVtx = 'SimG4Object' 

      untracked string outputFile = 'EcalSimHitsTask.root'
      untracked bool verbose = false
   }
                                                                                
	  path p1 = { prod }
                                                                                
      service = DaqMonitorROOTBackEnd{ }

      service = MessageLogger { }
       
	}		
