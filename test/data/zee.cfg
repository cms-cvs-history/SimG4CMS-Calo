process Sim  =  {

   untracked PSet maxEvents = { untracked int32 input = 50 }
   
   service = MessageLogger {
      untracked vstring destinations = {"cout"}

      untracked vstring categories = { "FwkJob", "PhysicsList", "G4cout", "G4cerr", "HitList", "MemoryCheck" }

      untracked PSet cout = {
         untracked bool noTimeStamps = false
	 untracked PSet default = { untracked int32 limit = 0 } 
	 untracked PSet FwkJob  = { untracked int32 limit = -1 }
	 untracked PSet PhysicsList = { untracked int32 limit = -1 }
	 untracked PSet HitStudy = { untracked int32 limit = -1 }
	 untracked PSet G4cout = { untracked int32 limit = -1 } 
	 untracked PSet G4cerr = { untracked int32 limit = -1 } 
	 untracked PSet MemoryCheck = { untracked int32 limit = -1 } 
      }

   }

   service = Timing {}
   
   service = SimpleMemoryCheck {
      untracked int32 ignoreTotal = 1 # default is one
      untracked bool showMallocInfo = true
      untracked bool dump = true
      untracked bool oncePerEventMode = true # default is false, so it only reports increases
   }
   
   service = RandomNumberGeneratorService  {
      untracked uint32 sourceSeed = 123456789
      PSet moduleSeeds = {
         untracked uint32 VtxSmeared = 98765432
         untracked uint32 g4SimHits = 9876
      }
   }

   #
   # this module is standard features starting release 1_2_0_pre4
   # and should be used to store random numbers for modules into
   # edm::Event (but not for sources, as of today Nov.7, 2006)
   #
   # of course, you have to place in the path to execute;
   # however, it's the service that caches the state of the engines,
   # and the producer only writes it into the event, thus it's NOT
   # important where in the path you place it - the state of the
   # engines will always be stored as of the beginning of an event
   # 
   module rndmStore = RandomEngineStateProducer { }

   include "SimG4CMS/Calo/data/PythiaZee.cfi"
   replace PythiaSource.pythiaHepMCVerbosity = false
   replace PythiaSource.pythiaPylistVerbosity = 0
   include "IOMC/EventVertexGenerators/data/VtxSmearedGauss.cfi"

   #Geometry
   #   
   include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
   include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"

   # Magnetic Field
   #
   include "Configuration/StandardSequences/data/MagneticField.cff"

   # event vertex smearing - applies only once (internal check)
   # Note : all internal generators will always do (0,0,0) vertex
   #
   include "SimG4Core/Application/data/g4SimHits.cfi"
   #
   replace g4SimHits.Physics.type = "SimG4Core/Physics/QGSP_EMV"
   replace g4SimHits.StackingAction.TrackNeutrino = false
   replace g4SimHits.Generator.MinPhiCut = -5.5
   replace g4SimHits.Generator.MaxPhiCut =  5.5
   replace g4SimHits.G4Commands ={"/physics_engine/neutron/energyLimit 1 MeV",
                                  "/physics_engine/neutron/timeLimit 0.001 ms"}

   # Event, etc. output
   #
   # now the order of execution
   #   
   service = TFileService {
      string fileName = "zee_QGSP_EMV.root"
   }

   include "SimG4CMS/Calo/data/CaloSimHitStudy.cfi"
   path p1 = { VtxSmeared, g4SimHits, caloSimHitStudy, rndmStore }
}		
